# Window Function with Over Clause

### Group by is important to this topic. Let's recap
SELECT department, COUNT(*)
FROM employees
GROUP BY department

--- You can use Group By to
SELECT first_name, department, (
  SELECT COUNT(*) FROM employees e1 WHERE e1.department = e2.department
)
FROM employees e2
GROUP BY department, first_name

--- With window function group by is not necessary anymore
SELECT first_name, department, (
  COUNT(*) OVER(PARTITION BY department)
)
FROM employees

--- Sum salary for each department using window function
SELECT first_name, department, (
  SUM(salary) OVER(PARTITION BY department)
)
FROM employees

--- Sum salary for all employees in the company using window function
SELECT first_name, department, (
  SUM(salary) OVER()
)
FROM employees

--- Count amount of employees per department and per region
SELECT first_name, department, region,
  COUNT(employee_id) OVER(PARTITION BY department) department_count,
  COUNT(employee_id) OVER(PARTITION BY employees.region_id) region_count
FROM employees
INNER JOIN regions ON regions.region_id = employees.region_id

--- Running total
SELECT first_name, hire_date, salary,
  SUM(salary) OVER(
    ORDER BY hire_date RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) AS running_total
FROM employees

--- Now in a shorter way
SELECT first_name, hire_date, salary,
  SUM(salary) OVER(ORDER BY hire_date) AS running_total
FROM employees

--- It can also be used with partitions
SELECT first_name, hire_date, department, salary,
  SUM(salary) OVER(PARTITION BY department ORDER BY hire_date) AS running_total
FROM employees

--- Using with one preceding rows
SELECT first_name, hire_date, department, salary,
  SUM(salary) OVER(ORDER BY hire_date ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS aggregated_total
FROM employees

--- Using with three preceding rows
SELECT first_name, hire_date, department, salary,
  SUM(salary) OVER(ORDER BY hire_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS aggregated_total
FROM employees

--- Rank adds an order based on the window criteria
SELECT first_name, hire_date, department, salary,
  RANK() OVER(PARTITION BY department ORDER BY salary DESC) AS aggregated_total
FROM employees

--- And than you can query the original result but you must use subquery
SELECT * FROM
(SELECT first_name, hire_date, department, salary,
  RANK() OVER(PARTITION BY department ORDER BY salary DESC) AS aggregated_total
FROM employees) query
WHERE aggregated_total = 3

--- Ntile organizes the queried data in blocks. In the example bellow it is organized in chunks of 5
SELECT first_name, hire_date, department, salary,
  NTILE(5) OVER(PARTITION BY department ORDER BY salary DESC) AS aggregated_total
FROM employees

--- First value shows the first data for each window just like the max/min function
SELECT first_name, hire_date, department, salary,
  FIRST_VALUE(salary) OVER(PARTITION BY department ORDER BY salary DESC) AS first_value
FROM employees

--- Very similar to first value is
SELECT first_name, hire_date, department, salary,
  NTH_VALUE(salary, 5) OVER(PARTITION BY department ORDER BY first_name DESC) AS fifth_value_repeted
FROM employees

--- Lead show the row value which directly follows a given row
SELECT first_name, hire_date, department, salary,
  LEAD(salary) OVER() AS next_salary
FROM employees

--- It does exactly the opposite as LEAD
SELECT first_name, hire_date, department, salary,
  LAG(salary) OVER() AS privious_salary
FROM employees

--- Show the closest salary to a given employee
SELECT department, last_name, salary,
  LAG(salary) OVER(ORDER BY salary DESC) AS closest_higher_salary
FROM employees

SELECT department, last_name, salary,
  LEAD(salary) OVER(ORDER BY salary DESC) AS closest_lower_salary
FROM employees

--- Taking partition in consideration
SELECT department, last_name, salary,
  LEAD(salary) OVER(PARTITION BY department ORDER BY salary DESC) AS closest_lower_salary
FROM employees

# Rollups and Cubes

--- Create a table called sales
--- You can group by country, city and continent
SELECT continent, sum(units_sold) FROM sales GROUP BY continent
SELECT city, sum(units_sold) FROM sales GROUP BY city
SELECT country, sum(units_sold) FROM sales GROUP BY country

--- Grouping sets help you to query data using a single query
SELECT continent, country, city, SUM(units_sold)
FROM sales
GROUP BY GROUPING SETS(continent, country, city)

--- With () means that SUM of all values will be shown as well
SELECT continent, country, city, SUM(units_sold)
FROM sales
GROUP BY GROUPING SETS(continent, country, city, ())

--- Rollup group by the permutation of set of data
SELECT continent, country, city, SUM(units_sold)
FROM sales
GROUP BY ROLLUP(continent, country, city)

--- Cube runs all the combinations of each column
SELECT continent, country, city, SUM(units_sold)
FROM sales
GROUP BY CUBE(continent, country, city)
